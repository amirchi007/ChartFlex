package com.amir.steelsenseandroidtask.uiimport androidx.compose.runtime.Stateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.ui.graphics.Colorimport com.amir.steelsenseandroidtask.domain.model.ChartEntryimport androidx.lifecycle.ViewModelimport com.amir.steelsenseandroidtask.domain.useCase.GetChartDataUseCaseimport dagger.hilt.android.lifecycle.HiltViewModelimport javax.inject.Inject@HiltViewModelclass LineChartViewModel @Inject constructor(    private val getChartDataUseCase: GetChartDataUseCase) : ViewModel() {    private val datasets = getChartDataUseCase()    private val _showLine1 = mutableStateOf(true)    private val _showLine2 = mutableStateOf(true)    private val _showLine3 = mutableStateOf(true)    val showLine1: State<Boolean> = _showLine1    val showLine2: State<Boolean> = _showLine2    val showLine3: State<Boolean> = _showLine3    private val _visibleDatasets = mutableStateOf(generateVisibleDatasets())    val visibleDatasets: State<List<Pair<List<ChartEntry>, Color>>> = _visibleDatasets    private fun generateVisibleDatasets(): List<Pair<List<ChartEntry>, Color>> {        return listOfNotNull(            if (_showLine1.value) datasets[0] to Color.Red else null,            if (_showLine2.value) datasets[1] to Color.Green else null,            if (_showLine3.value) datasets[2] to Color.Blue else null        )    }    fun toggleLine(index: Int) {        when (index) {            1 -> _showLine1.value = !_showLine1.value            2 -> _showLine2.value = !_showLine2.value            3 -> _showLine3.value = !_showLine3.value        }        _visibleDatasets.value = generateVisibleDatasets()    }}